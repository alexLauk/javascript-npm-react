apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: react-frontend
  title: React Front-End
  description: Create interactive, dynamic, and highly performant user interfaces built with JavaScript components and packaged inside containers.
  tags:
    - kubernetes
    - javascript
    - react
    - npm
spec:
  owner: user:guest
  type: website
  lifecycle: production

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: General Information
      required:
        - name
        - enterprise_id
        - business_unit
        - email
      properties:
        name:
          title: Application Name
          type: string
          description: Unique name of the application
          ui:autofocus: true
        description:
          title: Application Description
          type: string
          description: Describe the purpose of your application
          ui:autofocus: true
          ui:widget: textarea
          ui:options:
            rows: 2
        enterprise_id:
          title: Enterprise Unified Identification
          type: string
          description: Unique id across all enterprise
          ui:autofocus: true
        business_unit:
          title: Business Unit Name
          type: string
          description: Enter business unit you belong to or you create the app in
          enum:
            - DigitalPlatform
            - Bonds
            - Claim
            - Underwriting
            - Policy
            - Reinsurance
        email:
          title: Owner's Email
          type: string
          description: Your email as the owner
          ui:autofocus: true
          ui:widget: email
          format: email
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          system: ${{ parameters.business_unit }}
          email: ${{ parameters.email }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
